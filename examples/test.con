#abcdefghijklmnopqrstuvwxyz
#ABCDEFGHIJKLMNOPQRSTUVWXYZ
#19191919191919191919191919
#[one][two][three]OK
#>ĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂĂ<

Main: {
  test1: at 0 Test1
  test2: at 0 Test2
  test3: at 0 Test3
  test4: at 0 Test4
  test5: at 0 Test5
  test6: at 0 Test6
  test7: at 0 Test7
  test8: at 0 Test8
  test9: at 0 Test9
  test10: at 0 Test10
  test11: at 0 Test11
  test12: at 0 Test12
  test13: at 0 Test13
  test14: at 0 Test14
  test15: at 0 Test15
  test16: at 0 Test16
  test17: at 0 Test17
  test18: at 0 Test18
  test19: at 0 Test19
  test20: at 0 Test20
  test21: at 0 Test21
  test22: at 0 Test22
  test23: at 0 Test23
  test24: at 0 Test24
  test25: at 0 Test25
  test26: at 0 Test26
  test27: at 0 Test27
  test28: at 0 Test28
  test29: at 0 Test29
}


Test1: {
  f1: char[5] "#abcd"
  e,f,g,h: char
  i: char "i"
  char[5]
  f2: char[10]
  nada: {
    bool: bool
    null: null
  }[2]
}


Test2: {
  a:  at(1) littleendian int8 'a'
  a_: at(1) bigendian    int8 'a'
  ba: at(1) littleendian int16 'ba'
  ab: at(1) bigendian    int16 'ab'
  dcba: at(1) littleendian int32 'dcba'
  abcd: at(1) bigendian    int32 'abcd'
}


Test3: {
  char[before 'L']
  "LMNOP"
  q: char
  totee: TString "RST"
}.check(q = "Q")
#terminator = 'T' as char
TString: char[through "T"]


Test4: {
  byte[before '1']
  little: Little
  big: Big
}
Word: signed size 16 byte
Big: bigendian { word: Word }
Little: littleendian { word: Word }

 
Test5: {
  char[through "["]
  one: char[before ']']
  apple: char[2]
  two: byte[through 'o']
  closebracket: char
  "[three]"
  ok: "OK"
}


Test6: {
  reprise: at(0) String5
  thing1: byte
  thing2: byte (thing1 + 1)
  things: {b: byte (thing1 + 2 + N)}[2 index N]
}
String5: char[5]


Test7: {
  byte '#'
  uint8 'a'
  uint16 'bc'
  uint32 'defg'
  uint64 'hijklmno'
  sbyte 'p'
  int8 'q'
  int16 'rs'
  char[until '#']
  int32 'ABCD'
  int64 'EFGHIJKL'
  mmmmhmmm: char
}


Test8: {
  pound: char
  a: char
  b: char
}.select(a) "a"


czech: null.select(true)  # TODO: make official?
Test9: union {
  {check (1 = 3) null; oughtnt: char }
  {czech (2 = 3); shouldnt: char }
  "N"
  char.if(4 = 5)
  {czech ("t" = "t"); should: char[2] }
  {wontgethere: "#abc"}
} {"should":"#a"}

# Recursive def'n
Test10: union {
  {"#"; pound: Test10 }
  {a: "a"}
}
 
Test11: {
  key1: char
  value1: char
  key2: char
  value2: char
  map1: null.select {key1:value1}
  map2: null.select {key1:value1, key2:value2}
}.select(map2) {"b":"c","#":"a"}


Test12: char.check(this = "#")


Test13: byte[3] (['#', 'a', 'b'])


Test14: { 
  char[through 'z']
  newline: char "\n"
}


Test15: {
  char[through '>']
  ahornc: char
  ahornb: byte
  i16: int16
  u16: uint16
  i32: int32
  u32: uint32
  i64: int64
  u64: uint64
}

<script>
function double(x) {
  return x + x;
}
function triplethis() {
  return this + this + this;
}
</script>

Test16: {
  char
  abcabc: char[3].select(double(this)) "abcabc"
  de3: char[2].select(triplethis()) "dedede"
}


Test17: {
  filename: null.select(filename)
  another: OtherType.reconstruct("ZYXWandetc")
  other: OtherFile.load(filename)
}
OtherType: { 
  threeStrings: char[3][3]
  byte[]
}
OtherFile: { 
  threeStrings: char[3][3]
  filename: null.select(filename)
  byte[] 
}

<script>
function thebits() {
  var r = [];
  for (var i = 7; i >= 0; --i)
    r.push(this >> i & 1);
  return r;
}
function thenibbles() {
  return [this >> 4, this & 0xf];
}
</script>

Test18: {
  bpound: byte.at(0).select(thebits())
  pound: bit[8].at(0) (bpound)
  na: byte.at(1).select(thenibbles())
  a: nibble[2].at(1) (na)
}
bit: size 1 byte
nibble: size 4 byte

Test19: {
  somebits: bit[8][8][2]
  pos: null.select(position) (0x10)
}

Test20: {
  char[10].cast(char[until 'c']) "#ab"
  char[10].cast(char[until 'm']) "jkl"
  hello1: null.select("hello\000\000\000")
  hello: null.select("hello\000\000\000").cast(cstring) "hello"
}


Test21: union {
  char[1].if(false)
  char[2].if(this = "xy")
  char[3].if(this = "#ab")
  char[4]
} "#ab"


Test22: {
  le32: float32.littleendian.reconstruct([0,0,0x80,0x3f]) 1 
  le32a: float32.littleendian.reconstruct("\x00\x00\x80\x3f") 1
  be32: float32.bigendian.reconstruct([0x3f,0x80,0,0]) 1
  le64: float64.littleendian.reconstruct("\x55\x55\x55\x55\x55\x55\xd5\x3f") 0.33333333333333333
  be64: float64.bigendian.reconstruct([0x3f,0xd5,0x55,0x55,0x55,0x55,0x55,0x55]) 0.333333333333333333333
}


Test23: {}
Test24: {}
Test25: {}
Test26: {}
Test27: {}
Test28: {}
Test29: {}

