# Construction of a RIFF WAV file

ID: byte[4]

RiffFile: littleendian {
  "RIFF"      # RIFF file signature
  uint32      chunkSize
  "WAVE"      # WAVE format tag
  WaveFormat  format
  DataChunk   data
  MiscChunk[] other
}

WAVE_FORMAT_PCM = 1

WaveFormat: {
  "fmt "                # WAVE format tag
  uint32 fLen           # length of data in the format chunk
  uint16 (WAVE_FORMAT_PCM) encoding
  uint16 nChannels      # (mono=1, stereo=2)
  uint32 nSamplesPerSec # Playback frequency
  uint32 nAvgBytesPerSec
  uint16 nBlockAlign
  uint16 wBitsPerSample
  if (fLen > 16) uint16 cbSize         # 0 or 22
  if (fLen > 18) {
    uint16 wValidBitsPerSample
    uint32 dwChannelMask
    byte[16] subFormat
  } extended
}

# The Data Chunk

DataChunk: {
  "data"
  uint32 dLen	# Length of data in the chunk
  datum[8 * dLen/(format.wBitsPerSample)] dData  #  waveform  data 
  if (dLen & 1) byte # padding
}.select(dData)

datum: union {
  check(format.nChannels = 1) sample
  check(format.nChannels = 2) {sample left, right}
}
	
sample: union {
  check ((format.wBitsPerSample) = 8) byte
  size(format.wBitsPerSample)  sbyte
}

MiscChunk: {
  char[4] chunkId
  uint32  length
  byte[length] data
}
